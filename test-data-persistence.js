#!/usr/bin/env node

// PRUEBA ESPEC√çFICA DE PERSISTENCIA DE DATOS
const axios = require('axios');

const BASE_URL = 'https://temporizador-jade.vercel.app';

console.log('üß™ PRUEBA DE PERSISTENCIA DE DATOS');
console.log('==================================');

async function testDataPersistence() {
  try {
    console.log('üìä 1. Verificando estado inicial...');
    const initialStatus = await axios.get(`${BASE_URL}/admin/status`);
    console.log(`‚úÖ Estado inicial: ${initialStatus.data.children} ni√±os, ${initialStatus.data.games} juegos`);
    
    console.log('\nüë∂ 2. Creando nuevo ni√±o...');
    const newChild = await axios.post(`${BASE_URL}/children`, {
      name: 'Ni√±o Persistencia Test',
      nickname: 'PersistTest',
      fatherName: 'Padre Test',
      motherName: 'Madre Test'
    });
    console.log(`‚úÖ Ni√±o creado: ID ${newChild.data.id}, Nombre: ${newChild.data.name}`);
    
    console.log('\nüéÆ 3. Creando nuevo juego...');
    const newGame = await axios.post(`${BASE_URL}/games`, {
      name: 'Juego Persistencia Test'
    });
    console.log(`‚úÖ Juego creado: ID ${newGame.data.id}, Nombre: ${newGame.data.name}`);
    
    console.log('\n‚è∞ 4. Creando nueva sesi√≥n...');
    const newSession = await axios.post(`${BASE_URL}/sessions/start`, {
      childId: newChild.data.id,
      gameId: newGame.data.id,
      duration: 15
    });
    console.log(`‚úÖ Sesi√≥n creada: ID ${newSession.data.id}, Duraci√≥n: ${newSession.data.duration} min`);
    
    console.log('\nüìä 5. Verificando datos despu√©s de creaci√≥n...');
    const afterCreateStatus = await axios.get(`${BASE_URL}/admin/status`);
    console.log(`‚úÖ Despu√©s de crear: ${afterCreateStatus.data.children} ni√±os, ${afterCreateStatus.data.games} juegos, ${afterCreateStatus.data.activeSessions} sesiones activas`);
    
    console.log('\n‚è≥ 6. Esperando 10 segundos para verificar persistencia...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    console.log('\nüìä 7. Verificando persistencia de datos...');
    const persistenceStatus = await axios.get(`${BASE_URL}/admin/status`);
    console.log(`‚úÖ Despu√©s de espera: ${persistenceStatus.data.children} ni√±os, ${persistenceStatus.data.games} juegos, ${persistenceStatus.data.activeSessions} sesiones activas`);
    
    // Verificar que los datos espec√≠ficos siguen ah√≠
    console.log('\nüîç 8. Verificando datos espec√≠ficos...');
    const childrenList = await axios.get(`${BASE_URL}/children`);
    const gamesList = await axios.get(`${BASE_URL}/games`);
    const activeSessions = await axios.get(`${BASE_URL}/sessions/active`);
    
    const foundChild = childrenList.data.find(c => c.name === 'Ni√±o Persistencia Test');
    const foundGame = gamesList.data.find(g => g.name === 'Juego Persistencia Test');
    const foundSession = activeSessions.data.find(s => s.id === newSession.data.id);
    
    console.log(`‚úÖ Ni√±o encontrado: ${foundChild ? 'S√ç' : 'NO'} - ${foundChild ? foundChild.name : 'No encontrado'}`);
    console.log(`‚úÖ Juego encontrado: ${foundGame ? 'S√ç' : 'NO'} - ${foundGame ? foundGame.name : 'No encontrado'}`);
    console.log(`‚úÖ Sesi√≥n encontrada: ${foundSession ? 'S√ç' : 'NO'} - ${foundSession ? `ID ${foundSession.id}` : 'No encontrada'}`);
    
    console.log('\nüßπ 9. Limpiando datos de prueba...');
    
    // Finalizar sesi√≥n
    await axios.post(`${BASE_URL}/sessions/${newSession.data.id}/end`);
    console.log('‚úÖ Sesi√≥n finalizada');
    
    // Eliminar juego
    await axios.delete(`${BASE_URL}/games/${newGame.data.id}`);
    console.log('‚úÖ Juego eliminado');
    
    // Eliminar ni√±o
    await axios.delete(`${BASE_URL}/children/${newChild.data.id}`);
    console.log('‚úÖ Ni√±o eliminado');
    
    console.log('\nüìä 10. Verificando limpieza...');
    const finalStatus = await axios.get(`${BASE_URL}/admin/status`);
    console.log(`‚úÖ Estado final: ${finalStatus.data.children} ni√±os, ${finalStatus.data.games} juegos, ${finalStatus.data.activeSessions} sesiones activas`);
    
    // Verificar que volvimos al estado inicial
    if (finalStatus.data.children === initialStatus.data.children && 
        finalStatus.data.games === initialStatus.data.games) {
      console.log('\nüéâ PRUEBA DE PERSISTENCIA EXITOSA!');
      console.log('‚úÖ Los datos se mantienen correctamente');
      console.log('‚úÖ Los datos nuevos se persisten');
      console.log('‚úÖ La limpieza funciona correctamente');
      console.log('‚úÖ No hay p√©rdida de datos');
    } else {
      console.log('\n‚ùå PRUEBA DE PERSISTENCIA FALLIDA!');
      console.log('‚ùå Los datos no se mantienen correctamente');
      console.log(`‚ùå Esperado: ${initialStatus.data.children} ni√±os, ${initialStatus.data.games} juegos`);
      console.log(`‚ùå Actual: ${finalStatus.data.children} ni√±os, ${finalStatus.data.games} juegos`);
    }
    
  } catch (error) {
    console.error('‚ùå Error en la prueba de persistencia:', error.message);
    if (error.response) {
      console.error('‚ùå Status:', error.response.status);
      console.error('‚ùå Data:', error.response.data);
    }
  }
}

// Ejecutar prueba
testDataPersistence();
