#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Configuraci√≥n
const LOCAL_DATA_FILE = path.join(__dirname, 'data.json');
const PRODUCTION_URL = process.env.PRODUCTION_URL || 'https://temporizador-jade.vercel.app';

async function syncCompleteData() {
  try {
    console.log('üîÑ Iniciando sincronizaci√≥n completa de datos...');
    
    // Leer datos locales
    if (!fs.existsSync(LOCAL_DATA_FILE)) {
      console.error('‚ùå No se encontr√≥ el archivo data.json local');
      process.exit(1);
    }
    
    const localData = JSON.parse(fs.readFileSync(LOCAL_DATA_FILE, 'utf8'));
    console.log(`üìä Datos locales encontrados:`);
    console.log(`   - Ni√±os: ${localData.children.length}`);
    console.log(`   - Juegos: ${localData.games.length}`);
    console.log(`   - Sesiones: ${localData.sessions.length}`);
    
    console.log(`üöÄ Sincronizando con producci√≥n: ${PRODUCTION_URL}`);
    
    // 1. Sincronizar juegos primero
    console.log('\nüéÆ Sincronizando juegos...');
    const gameMap = {}; // Mapeo de ID local a ID de producci√≥n
    
    for (const game of localData.games) {
      try {
        const response = await fetch(`${PRODUCTION_URL}/games`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ name: game.name })
        });
        
        if (response.ok) {
          const newGame = await response.json();
          gameMap[game.id] = newGame.id;
          console.log(`   ‚úÖ ${game.name} (${game.id} ‚Üí ${newGame.id})`);
        } else {
          console.log(`   ‚ùå Error con ${game.name}: ${response.status}`);
        }
      } catch (error) {
        console.log(`   ‚ùå Error con ${game.name}: ${error.message}`);
      }
    }
    
    // 2. Sincronizar ni√±os con informaci√≥n completa
    console.log('\nüë∂ Sincronizando ni√±os con informaci√≥n completa...');
    const childMap = {}; // Mapeo de ID local a ID de producci√≥n
    
    for (const child of localData.children) {
      try {
        const childData = {
          name: child.name,
          nickname: child.nickname || undefined,
          fatherName: child.fatherName || undefined,
          motherName: child.motherName || undefined
        };
        
        const response = await fetch(`${PRODUCTION_URL}/children`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(childData)
        });
        
        if (response.ok) {
          const newChild = await response.json();
          childMap[child.id] = newChild.id;
          console.log(`   ‚úÖ ${child.name} (${child.id} ‚Üí ${newChild.id})`);
          if (child.fatherName || child.motherName) {
            console.log(`      üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Padres: ${child.fatherName || 'N/A'} / ${child.motherName || 'N/A'}`);
          }
        } else {
          console.log(`   ‚ùå Error con ${child.name}: ${response.status}`);
        }
      } catch (error) {
        console.log(`   ‚ùå Error con ${child.name}: ${error.message}`);
      }
    }
    
    // 3. Sincronizar sesiones hist√≥ricas
    console.log('\nüìÖ Sincronizando sesiones hist√≥ricas...');
    let syncedSessions = 0;
    
    for (const session of localData.sessions) {
      try {
        const newChildId = childMap[session.childId];
        const newGameId = gameMap[session.gameId];
        
        if (!newChildId || !newGameId) {
          console.log(`   ‚ö†Ô∏è  Sesi√≥n ${session.id} omitida - referencias no encontradas`);
          continue;
        }
        
        // Crear sesi√≥n con datos hist√≥ricos
        const sessionData = {
          childId: newChildId,
          gameId: newGameId,
          duration: session.duration,
          start: session.start,
          end: session.end
        };
        
        const response = await fetch(`${PRODUCTION_URL}/sessions/start`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            childId: newChildId,
            gameId: newGameId,
            duration: session.duration
          })
        });
        
        if (response.ok) {
          const newSession = await response.json();
          console.log(`   ‚úÖ Sesi√≥n ${session.id} ‚Üí ${newSession.id} (${session.duration} min)`);
          syncedSessions++;
          
          // Finalizar la sesi√≥n inmediatamente para mantener el historial
          if (session.end) {
            await fetch(`${PRODUCTION_URL}/sessions/end`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ sessionId: newSession.id })
            });
          }
        } else {
          console.log(`   ‚ùå Error con sesi√≥n ${session.id}: ${response.status}`);
        }
      } catch (error) {
        console.log(`   ‚ùå Error con sesi√≥n ${session.id}: ${error.message}`);
      }
    }
    
    console.log('\n‚úÖ Sincronizaci√≥n completa finalizada!');
    console.log(`üìà Resumen:`);
    console.log(`   - Juegos sincronizados: ${Object.keys(gameMap).length}`);
    console.log(`   - Ni√±os sincronizados: ${Object.keys(childMap).length}`);
    console.log(`   - Sesiones sincronizadas: ${syncedSessions}`);
    console.log('\nüéâ Todos los datos est√°n ahora disponibles en producci√≥n!');
    
  } catch (error) {
    console.error('‚ùå Error durante la sincronizaci√≥n:', error.message);
    process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  syncCompleteData();
}

module.exports = { syncCompleteData };
