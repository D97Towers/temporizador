#!/usr/bin/env node

// PRUEBAS COMPLETAS DEL BACKEND - TODOS LOS CAMINOS
const axios = require('axios');

const BASE_URL = 'https://temporizador-jade.vercel.app';
const API_URL = BASE_URL;

console.log('üß™ INICIANDO PRUEBAS COMPLETAS DEL BACKEND');
console.log('==========================================');

// Funci√≥n para hacer requests con manejo de errores
async function testRequest(method, endpoint, data = null, description = '') {
  try {
    console.log(`\nüì° ${method.toUpperCase()} ${endpoint}`);
    console.log(`üìù ${description}`);
    
    const config = {
      method,
      url: `${API_URL}${endpoint}`,
      timeout: 15000 // 15 segundos timeout
    };
    
    if (data) {
      config.data = data;
      config.headers = { 'Content-Type': 'application/json' };
    }
    
    const response = await axios(config);
    console.log(`‚úÖ Status: ${response.status}`);
    console.log(`üìä Response:`, JSON.stringify(response.data, null, 2));
    return response.data;
  } catch (error) {
    console.log(`‚ùå Error: ${error.response?.status || 'Network Error'}`);
    console.log(`üí¨ Message: ${error.response?.data?.error || error.message}`);
    return null;
  }
}

// Funci√≥n para probar rate limiting
async function testRateLimit() {
  console.log('\nüö¶ PROBANDO RATE LIMITING');
  console.log('========================');
  
  const promises = [];
  for (let i = 0; i < 110; i++) { // M√°s del l√≠mite de 100
    promises.push(testRequest('GET', '/admin/status', null, `Request ${i + 1}`));
  }
  
  const results = await Promise.all(promises);
  const rateLimited = results.filter(r => r === null).length;
  
  console.log(`üìä Resultados: ${results.length - rateLimited} exitosos, ${rateLimited} limitados`);
  
  if (rateLimited > 0) {
    console.log('‚úÖ Rate limiting funcionando correctamente');
  } else {
    console.log('‚ùå Rate limiting NO est√° funcionando');
  }
}

// Funci√≥n para probar validaci√≥n de datos
async function testDataValidation() {
  console.log('\nüîç PROBANDO VALIDACI√ìN DE DATOS');
  console.log('===============================');
  
  // 1. Probar creaci√≥n de ni√±o con datos inv√°lidos
  await testRequest('POST', '/children', {
    name: '', // Nombre vac√≠o
  }, 'Ni√±o con nombre vac√≠o (deber√≠a fallar)');
  
  await testRequest('POST', '/children', {
    name: 'A', // Nombre muy corto
  }, 'Ni√±o con nombre muy corto (deber√≠a fallar)');
  
  await testRequest('POST', '/children', {
    name: 'A'.repeat(60), // Nombre muy largo
  }, 'Ni√±o con nombre muy largo (deber√≠a fallar)');
  
  await testRequest('POST', '/children', {
    name: 'Juan<script>alert("xss")</script>', // XSS attempt
  }, 'Ni√±o con intento de XSS (deber√≠a fallar)');
  
  await testRequest('POST', '/children', {
    name: 'Juan123!@#', // Caracteres especiales no permitidos
  }, 'Ni√±o con caracteres especiales (deber√≠a fallar)');
  
  // 2. Probar creaci√≥n de sesi√≥n con datos inv√°lidos
  await testRequest('POST', '/sessions/start', {
    childId: 'invalid', // ID inv√°lido
    gameId: 1,
    duration: 30
  }, 'Sesi√≥n con childId inv√°lido (deber√≠a fallar)');
  
  await testRequest('POST', '/sessions/start', {
    childId: 1,
    gameId: 'invalid', // ID inv√°lido
    duration: 30
  }, 'Sesi√≥n con gameId inv√°lido (deber√≠a fallar)');
  
  await testRequest('POST', '/sessions/start', {
    childId: 1,
    gameId: 1,
    duration: -5 // Duraci√≥n negativa
  }, 'Sesi√≥n con duraci√≥n negativa (deber√≠a fallar)');
  
  await testRequest('POST', '/sessions/start', {
    childId: 1,
    gameId: 1,
    duration: 200 // Duraci√≥n muy alta
  }, 'Sesi√≥n con duraci√≥n muy alta (deber√≠a fallar)');
  
  await testRequest('POST', '/sessions/start', {
    childId: 1,
    gameId: 1,
    duration: 1.5 // Duraci√≥n decimal
  }, 'Sesi√≥n con duraci√≥n decimal (deber√≠a fallar)');
  
  await testRequest('POST', '/sessions/start', {
    childId: 999999, // ID inexistente
    gameId: 1,
    duration: 30
  }, 'Sesi√≥n con childId inexistente (deber√≠a fallar)');
  
  await testRequest('POST', '/sessions/start', {
    childId: 1,
    gameId: 999999, // ID inexistente
    duration: 30
  }, 'Sesi√≥n con gameId inexistente (deber√≠a fallar)');
}

// Funci√≥n para probar endpoints b√°sicos
async function testBasicEndpoints() {
  console.log('\nüè† PROBANDO ENDPOINTS B√ÅSICOS');
  console.log('============================');
  
  // 1. Estado del servidor
  await testRequest('GET', '/admin/status', null, 'Estado del servidor');
  
  // 2. Listar ni√±os
  await testRequest('GET', '/children', null, 'Listar todos los ni√±os');
  
  // 3. Listar juegos
  await testRequest('GET', '/games', null, 'Listar todos los juegos');
  
  // 4. Listar sesiones activas
  await testRequest('GET', '/sessions/active', null, 'Listar sesiones activas');
  
  // 5. Listar historial de sesiones
  await testRequest('GET', '/sessions', null, 'Listar historial de sesiones');
}

// Funci√≥n para probar operaciones CRUD
async function testCRUDOperations() {
  console.log('\nüìù PROBANDO OPERACIONES CRUD');
  console.log('============================');
  
  // 1. Crear ni√±o v√°lido
  const childResponse = await testRequest('POST', '/children', {
    name: 'Test Ni√±o',
    nickname: 'Test',
    fatherName: 'Padre Test',
    motherName: 'Madre Test'
  }, 'Crear ni√±o v√°lido');
  
  if (childResponse && childResponse.id) {
    const childId = childResponse.id;
    
    // 2. Crear juego v√°lido
    const gameResponse = await testRequest('POST', '/games', {
      name: 'Test Juego'
    }, 'Crear juego v√°lido');
    
    if (gameResponse && gameResponse.id) {
      const gameId = gameResponse.id;
      
      // 3. Crear sesi√≥n v√°lida
      const sessionResponse = await testRequest('POST', '/sessions/start', {
        childId: childId,
        gameId: gameId,
        duration: 10
      }, 'Crear sesi√≥n v√°lida');
      
      if (sessionResponse && sessionResponse.id) {
        const sessionId = sessionResponse.id;
        
        // 4. Extender sesi√≥n
        await testRequest('POST', '/sessions/extend', {
          sessionId: sessionId,
          additionalTime: 5
        }, 'Extender sesi√≥n');
        
        // 5. Finalizar sesi√≥n
        await testRequest('POST', `/sessions/${sessionId}/end`, null, 'Finalizar sesi√≥n');
      }
      
      // 6. Editar ni√±o
      await testRequest('PUT', `/children/${childId}`, {
        name: 'Test Ni√±o Editado',
        nickname: 'Test Editado',
        fatherName: 'Padre Editado',
        motherName: 'Madre Editada'
      }, 'Editar informaci√≥n del ni√±o');
      
      // 7. Eliminar juego
      await testRequest('DELETE', `/games/${gameId}`, null, 'Eliminar juego');
      
      // 8. Eliminar ni√±o
      await testRequest('DELETE', `/children/${childId}`, null, 'Eliminar ni√±o');
    }
  }
}

// Funci√≥n para probar control de concurrencia
async function testConcurrency() {
  console.log('\n‚ö° PROBANDO CONTROL DE CONCURRENCIA');
  console.log('===================================');
  
  // Crear un ni√±o para las pruebas
  const childResponse = await testRequest('POST', '/children', {
    name: 'Concurrency Test',
    nickname: 'ConTest'
  }, 'Crear ni√±o para prueba de concurrencia');
  
  if (!childResponse || !childResponse.id) {
    console.log('‚ùå No se pudo crear ni√±o para prueba de concurrencia');
    return;
  }
  
  const childId = childResponse.id;
  
  // Intentar m√∫ltiples operaciones simult√°neas en el mismo recurso
  const promises = [];
  for (let i = 0; i < 5; i++) {
    promises.push(
      testRequest('PUT', `/children/${childId}`, {
        name: `Concurrency Test ${i}`,
        nickname: `ConTest${i}`
      }, `Edici√≥n concurrente ${i + 1}`)
    );
  }
  
  const results = await Promise.all(promises);
  const successful = results.filter(r => r !== null).length;
  const locked = results.filter(r => r === null).length;
  
  console.log(`üìä Resultados: ${successful} exitosos, ${locked} bloqueados por concurrencia`);
  
  if (locked > 0) {
    console.log('‚úÖ Control de concurrencia funcionando correctamente');
  } else {
    console.log('‚ö†Ô∏è Control de concurrencia podr√≠a no estar funcionando');
  }
  
  // Limpiar
  await testRequest('DELETE', `/children/${childId}`, null, 'Limpiar ni√±o de prueba');
}

// Funci√≥n para probar timeouts
async function testTimeouts() {
  console.log('\n‚è∞ PROBANDO TIMEOUTS');
  console.log('===================');
  
  // Probar con un endpoint que deber√≠a responder r√°pido
  const startTime = Date.now();
  const response = await testRequest('GET', '/admin/status', null, 'Prueba de timeout');
  const endTime = Date.now();
  
  const duration = endTime - startTime;
  console.log(`‚è±Ô∏è Duraci√≥n de la request: ${duration}ms`);
  
  if (duration < 15000) {
    console.log('‚úÖ Timeout funcionando correctamente');
  } else {
    console.log('‚ùå Timeout NO est√° funcionando');
  }
}

// Funci√≥n principal
async function runAllTests() {
  try {
    console.log('üöÄ Iniciando pruebas completas...\n');
    
    // 1. Probar endpoints b√°sicos
    await testBasicEndpoints();
    
    // 2. Probar validaci√≥n de datos
    await testDataValidation();
    
    // 3. Probar operaciones CRUD
    await testCRUDOperations();
    
    // 4. Probar rate limiting
    await testRateLimit();
    
    // 5. Probar control de concurrencia
    await testConcurrency();
    
    // 6. Probar timeouts
    await testTimeouts();
    
    console.log('\nüéâ TODAS LAS PRUEBAS COMPLETADAS');
    console.log('================================');
    console.log('‚úÖ Backend probado exhaustivamente');
    console.log('‚úÖ Validaciones funcionando');
    console.log('‚úÖ Rate limiting activo');
    console.log('‚úÖ Control de concurrencia implementado');
    console.log('‚úÖ Timeouts configurados');
    
  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error.message);
  }
}

// Ejecutar pruebas
runAllTests();
