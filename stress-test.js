const axios = require('axios');

const API_URL = 'https://temporizador-jade.vercel.app';

// Funci√≥n para generar nombres √∫nicos
function generateUniqueNames(count) {
  const firstNames = [
    'Alejandro', 'Andr√©s', 'Antonio', 'Carlos', 'David', 'Diego', 'Eduardo', 'Fernando',
    'Gabriel', 'Gonzalo', 'H√©ctor', 'Iv√°n', 'Javier', 'Jorge', 'Jos√©', 'Juan',
    'Luis', 'Manuel', 'Miguel', 'Pablo', 'Pedro', 'Rafael', 'Ricardo', 'Roberto',
    'Sergio', 'V√≠ctor', 'Adri√°n', 'Alberto', '√Ålvaro', 'Andr√©s', 'Bruno', 'C√©sar',
    'Daniel', 'Emilio', 'Enrique', 'Felipe', 'Francisco', 'Guillermo', 'Hugo', 'Ignacio',
    'Joaqu√≠n', 'Leonardo', 'Marcos', 'Mart√≠n', 'Nicol√°s', '√ìscar', 'Patricio', 'Ram√≥n',
    'Rodrigo', 'Samuel', 'Sebasti√°n', 'Tom√°s', 'Valent√≠n', 'Vicente', 'Agust√≠n', 'Benjam√≠n',
    'Cristian', 'Dami√°n', 'Emanuel', 'Fabi√°n', 'Gerardo', 'Hern√°n', 'Ismael', 'Julio',
    'Lorenzo', 'Mauricio', 'Nelson', 'Oliver', 'Pascual', 'Ramiro', 'Salvador', 'Tadeo',
    'Ulises', 'Vladimir', 'Walter', 'Xavier', 'Yago', 'Zacar√≠as', 'Abraham', 'Adriel',
    'Ariel', 'Bautista', 'Ciro', 'Dante', 'El√≠as', 'Facundo', 'Gael', 'Hugo',
    'Iker', 'Jaziel', 'Kai', 'Le√≥n', 'Mateo', 'Noah', 'Orion', 'Pablo',
    'Quinn', 'Rafael', 'Santiago', 'Tob√≠as', 'Uriel', 'V√≠ctor', 'William', 'Xavier',
    'Yahir', 'Zion', 'Aar√≥n', 'Brayan', 'Caleb', 'Dante', 'El√≠as', 'Felix',
    'Gonzalo', 'Hugo', 'Isaac', 'Joaqu√≠n', 'Kevin', 'Liam', 'Maximiliano', 'Noah',
    'Oliver', 'Pablo', 'Rafael', 'Santiago', 'Tom√°s', 'Valent√≠n', 'William', 'Xavier',
    'Yahir', 'Zion', 'Abraham', 'Adriel', 'Ariel', 'Bautista', 'Ciro', 'Dante'
  ];
  
  const lastNames = [
    'Garc√≠a', 'Rodr√≠guez', 'Mart√≠nez', 'Hern√°ndez', 'L√≥pez', 'Gonz√°lez', 'P√©rez', 'S√°nchez',
    'Ram√≠rez', 'Cruz', 'Flores', 'Reyes', 'Morales', 'Jim√©nez', '√Ålvarez', 'Ruiz',
    'Torres', 'D√≠az', 'Vargas', 'Romero', 'Sosa', 'Mendoza', 'Guerrero', 'Ramos',
    'Herrera', 'Medina', 'Castillo', 'Ortiz', 'Moreno', 'Guti√©rrez', 'Vega', 'Rojas',
    'Silva', 'Mu√±oz', 'Delgado', 'Castro', 'Ortega', 'R√≠os', 'N√∫√±ez', 'Contreras',
    'Espinoza', 'Sandoval', 'Campos', 'Valencia', 'Pe√±a', 'V√°squez', 'Le√≥n', 'Molina',
    'Herrera', 'Aguilar', 'Reyes', 'Jim√©nez', 'Gonz√°lez', 'Mart√≠nez', 'Rodr√≠guez', 'L√≥pez',
    'P√©rez', 'Garc√≠a', 'S√°nchez', 'Ram√≠rez', 'Cruz', 'Flores', 'Morales', '√Ålvarez',
    'Ruiz', 'Torres', 'D√≠az', 'Vargas', 'Romero', 'Sosa', 'Mendoza', 'Guerrero',
    'Ramos', 'Medina', 'Castillo', 'Ortiz', 'Moreno', 'Guti√©rrez', 'Vega', 'Rojas',
    'Silva', 'Mu√±oz', 'Delgado', 'Castro', 'Ortega', 'R√≠os', 'N√∫√±ez', 'Contreras',
    'Espinoza', 'Sandoval', 'Campos', 'Valencia', 'Pe√±a', 'V√°squez', 'Le√≥n', 'Molina',
    'Aguilar', 'Reyes', 'Jim√©nez', 'Gonz√°lez', 'Mart√≠nez', 'Rodr√≠guez', 'L√≥pez', 'P√©rez',
    'Garc√≠a', 'S√°nchez', 'Ram√≠rez', 'Cruz', 'Flores', 'Morales', '√Ålvarez', 'Ruiz',
    'Torres', 'D√≠az', 'Vargas', 'Romero', 'Sosa', 'Mendoza', 'Guerrero', 'Ramos'
  ];

  const names = [];
  for (let i = 0; i < count; i++) {
    const firstName = firstNames[i % firstNames.length];
    const lastName = lastNames[Math.floor(i / firstNames.length) % lastNames.length];
    const number = Math.floor(i / (firstNames.length * lastNames.length)) + 1;
    names.push({
      name: `${firstName} ${lastName}${number > 1 ? ` ${number}` : ''}`,
      fatherName: `Padre_${firstName}`,
      motherName: `Madre_${lastName}`
    });
  }
  return names;
}

// Funci√≥n para crear ni√±os
async function createChildren(count) {
  console.log(`\nüöÄ Creando ${count} ni√±os...`);
  const names = generateUniqueNames(count);
  const children = [];
  
  for (let i = 0; i < count; i++) {
    try {
      const childData = {
        name: names[i].name,
        nickname: `nick_${i}`,
        fatherName: names[i].fatherName,
        motherName: names[i].motherName
      };
      
      const response = await axios.post(`${API_URL}/children`, childData);
      children.push(response.data);
      
      if ((i + 1) % 100 === 0) {
        console.log(`‚úÖ Creados ${i + 1} ni√±os...`);
      }
    } catch (error) {
      console.error(`‚ùå Error creando ni√±o ${i + 1}:`, error.response?.data || error.message);
    }
  }
  
  console.log(`‚úÖ Total ni√±os creados: ${children.length}`);
  return children;
}

// Funci√≥n para crear sesiones
async function createSessions(children, games) {
  console.log(`\nüéÆ Creando sesiones para ${children.length} ni√±os...`);
  const sessions = [];
  
  for (let i = 0; i < children.length; i++) {
    try {
      const child = children[i];
      const game = games[i % games.length];
      
      // Crear sesiones con duraciones variadas (algunas muy cortas para que expiren r√°pido)
      const duration = i % 10 === 0 ? 1 : Math.floor(Math.random() * 30) + 5; // 1 min para 10%, 5-35 min para el resto
      
      const sessionData = {
        childId: child.id,
        gameId: game.id,
        duration: duration
      };
      
      const response = await axios.post(`${API_URL}/sessions/start`, sessionData);
      sessions.push(response.data);
      
      if ((i + 1) % 100 === 0) {
        console.log(`‚úÖ Creadas ${i + 1} sesiones...`);
      }
    } catch (error) {
      console.error(`‚ùå Error creando sesi√≥n ${i + 1}:`, error.response?.data || error.message);
    }
  }
  
  console.log(`‚úÖ Total sesiones creadas: ${sessions.length}`);
  return sessions;
}

// Funci√≥n principal
async function runStressTest() {
  try {
    console.log('üß™ INICIANDO PRUEBA DE ESTR√âS - 1000+ NI√ëOS Y SESIONES');
    console.log('=' * 60);
    
    // Obtener juegos existentes
    console.log('\nüìã Obteniendo juegos existentes...');
    const gamesResponse = await axios.get(`${API_URL}/games`);
    const games = gamesResponse.data;
    console.log(`‚úÖ Juegos disponibles: ${games.map(g => g.name).join(', ')}`);
    
    // Crear 1000+ ni√±os
    const children = await createChildren(1000);
    
    // Crear sesiones para todos los ni√±os
    const sessions = await createSessions(children, games);
    
    // Obtener estad√≠sticas finales
    console.log('\nüìä ESTAD√çSTICAS FINALES:');
    const statusResponse = await axios.get(`${API_URL}/admin/status`);
    const status = statusResponse.data;
    console.log(JSON.stringify(status, null, 2));
    
    console.log('\nüéâ PRUEBA DE ESTR√âS COMPLETADA');
    console.log('Ahora puedes probar el frontend con 1000+ sesiones activas');
    
  } catch (error) {
    console.error('‚ùå Error en la prueba de estr√©s:', error.message);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  runStressTest();
}

module.exports = { runStressTest, createChildren, createSessions };
