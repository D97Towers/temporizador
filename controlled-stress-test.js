const axios = require('axios');

const API_URL = 'https://temporizador-jade.vercel.app';

async function controlledStressTest() {
  try {
    console.log('üß™ PRUEBA DE ESTR√âS CONTROLADA - 100+ SESIONES');
    console.log('=' * 50);
    
    // Paso 1: Verificar estado inicial
    console.log('\nüìã Verificando estado inicial...');
    const statusResponse = await axios.get(`${API_URL}/admin/status`);
    const initialStatus = statusResponse.data;
    console.log('Estado inicial:', initialStatus);
    
    // Paso 2: Crear ni√±os si no hay suficientes
    let children = [];
    if (initialStatus.children < 50) {
      console.log('\nüë∂ Creando ni√±os...');
      const childrenData = [
        { name: 'Alejandro Garc√≠a', fatherName: 'Carlos Garc√≠a', motherName: 'Mar√≠a Garc√≠a' },
        { name: 'Andr√©s Rodr√≠guez', fatherName: 'Jos√© Rodr√≠guez', motherName: 'Ana Rodr√≠guez' },
        { name: 'Antonio Mart√≠nez', fatherName: 'Miguel Mart√≠nez', motherName: 'Carmen Mart√≠nez' },
        { name: 'Carlos Hern√°ndez', fatherName: 'Luis Hern√°ndez', motherName: 'Isabel Hern√°ndez' },
        { name: 'David L√≥pez', fatherName: 'Pedro L√≥pez', motherName: 'Rosa L√≥pez' },
        { name: 'Diego Gonz√°lez', fatherName: 'Juan Gonz√°lez', motherName: 'Elena Gonz√°lez' },
        { name: 'Eduardo P√©rez', fatherName: 'Francisco P√©rez', motherName: 'Pilar P√©rez' },
        { name: 'Fernando S√°nchez', fatherName: 'Manuel S√°nchez', motherName: 'Concepci√≥n S√°nchez' },
        { name: 'Gabriel Ram√≠rez', fatherName: 'Antonio Ram√≠rez', motherName: 'Dolores Ram√≠rez' },
        { name: 'Gonzalo Cruz', fatherName: 'Jos√© Cruz', motherName: 'Teresa Cruz' }
      ];
      
      for (const childData of childrenData) {
        try {
          const response = await axios.post(`${API_URL}/children`, childData);
          children.push(response.data);
          console.log(`‚úÖ Creado: ${childData.name}`);
        } catch (error) {
          console.error(`‚ùå Error creando ${childData.name}:`, error.response?.data?.error || error.message);
        }
      }
    } else {
      // Obtener ni√±os existentes
      const childrenResponse = await axios.get(`${API_URL}/children`);
      children = childrenResponse.data;
      console.log(`‚úÖ Usando ${children.length} ni√±os existentes`);
    }
    
    // Paso 3: Obtener juegos
    const gamesResponse = await axios.get(`${API_URL}/games`);
    const games = gamesResponse.data;
    console.log(`‚úÖ Juegos disponibles: ${games.map(g => g.name).join(', ')}`);
    
    // Paso 4: Crear sesiones activas
    console.log('\nüéÆ Creando sesiones activas...');
    const sessions = [];
    const targetSessions = 50; // Empezar con 50 sesiones
    
    for (let i = 0; i < targetSessions; i++) {
      try {
        const child = children[i % children.length];
        const game = games[i % games.length];
        
        // Crear sesiones con duraciones variadas
        // 40% tendr√°n 1 minuto (para expirar r√°pido y generar alertas)
        // 60% tendr√°n 5-30 minutos
        const duration = i % 5 < 2 ? 1 : Math.floor(Math.random() * 25) + 5;
        
        const sessionData = {
          childId: child.id,
          gameId: game.id,
          duration: duration
        };
        
        const response = await axios.post(`${API_URL}/sessions/start`, sessionData);
        sessions.push(response.data);
        
        if ((i + 1) % 10 === 0) {
          console.log(`‚úÖ Creadas ${i + 1} sesiones...`);
        }
        
        // Peque√±a pausa para no sobrecargar
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`‚ùå Error creando sesi√≥n ${i + 1}:`, error.response?.data?.error || error.message);
      }
    }
    
    // Paso 5: Verificar estado final
    console.log('\nüìä Estado final:');
    const finalStatusResponse = await axios.get(`${API_URL}/admin/status`);
    const finalStatus = finalStatusResponse.data;
    console.log(JSON.stringify(finalStatus, null, 2));
    
    // Paso 6: Obtener sesiones activas
    const activeResponse = await axios.get(`${API_URL}/sessions/active`);
    const activeSessions = activeResponse.data;
    
    console.log(`\nüîç SESIONES ACTIVAS (${activeSessions.length}):`);
    activeSessions.forEach((session, index) => {
      console.log(`${index + 1}. ${session.childName} - ${session.gameName} - ${session.duration} min`);
    });
    
    // Paso 7: An√°lisis de sesiones que expirar√°n pronto
    const shortSessions = activeSessions.filter(s => s.duration === 1);
    console.log(`\n‚ö†Ô∏è Sesiones que expirar√°n en 1 minuto: ${shortSessions.length}`);
    
    if (shortSessions.length > 0) {
      console.log('Estas sesiones generar√°n alertas masivas:');
      shortSessions.slice(0, 5).forEach((session, index) => {
        console.log(`- ${session.childName} (${session.gameName})`);
      });
      if (shortSessions.length > 5) {
        console.log(`... y ${shortSessions.length - 5} m√°s`);
      }
    }
    
    console.log('\nüéâ PRUEBA DE ESTR√âS PREPARADA');
    console.log('Ahora puedes probar el frontend con:');
    console.log(`- ${finalStatus.children} ni√±os`);
    console.log(`- ${finalStatus.activeSessions} sesiones activas`);
    console.log(`- ${shortSessions.length} sesiones que expirar√°n pronto`);
    
    return {
      children: finalStatus.children,
      activeSessions: finalStatus.activeSessions,
      shortSessions: shortSessions.length,
      sessions: sessions
    };
    
  } catch (error) {
    console.error('‚ùå Error en prueba de estr√©s controlada:', error.message);
  }
}

// Ejecutar
controlledStressTest();
